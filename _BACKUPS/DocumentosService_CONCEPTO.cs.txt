using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using MySql.Data.MySqlClient;
using SWGROI_Server.DB;
using SWGROI_Server.Security;
using SWGROI_Server.Utils;
using SWGROI_Server.Infrastructure;

namespace SWGROI_Server.Services
{
    /// <summary>
    /// Servicio de negocio para el módulo de documentos
    /// Contiene toda la lógica de negocio y validaciones críticas
    /// </summary>
    public static class DocumentosService
    {
        /// <summary>
        /// Lista documentos con filtros y paginación
        /// </summary>
        /// <param name="context">Contexto HTTP</param>
        /// <param name="filtros">Filtros de búsqueda</param>
        /// <returns>Lista de documentos paginada</returns>
        public static void ListarDocumentos(HttpListenerContext context, dynamic filtros = null)
        {
            try
            {
                // Validar sesión activa
                if (!SessionManager.EsSesionValida(context.Request))
                {
                    HttpResponseHelper.SendErrorResponse(context, "Sesión no válida", 401);
                    return;
                }

                // Obtener usuario actual
                var usuario = SessionManager.ObtenerUsuario(context.Request);
                if (usuario == null)
                {
                    HttpResponseHelper.SendErrorResponse(context, "Usuario no autenticado", 401);
                    return;
                }

                // Construir parámetros de consulta
                var parametros = ExtraerParametrosListado(context.Request);
                
                // Validar parámetros
                if (parametros.page < 1) parametros.page = 1;
                if (parametros.pageSize < 1 || parametros.pageSize > 100) parametros.pageSize = 10;

                var documentos = new List<object>();
                var totalDocumentos = 0;

                using (var conexion = ConexionBD.ObtenerConexion())
                {
                    conexion.Open();

                    // Construir consulta SQL con filtros
                    var sql = ConstruirConsultaListado(parametros);
                    var sqlCount = ConstruirConsultaConteo(parametros);

                    // Obtener total de registros
                    using (var cmdCount = new MySqlCommand(sqlCount, conexion))
                    {
                        AgregarParametrosConsulta(cmdCount, parametros);
                        var totalObj = cmdCount.ExecuteScalar();
                        totalDocumentos = totalObj != null ? Convert.ToInt32(totalObj) : 0;
                    }

                    // Obtener documentos paginados
                    using (var cmd = new MySqlCommand(sql, conexion))
                    {
                        AgregarParametrosConsulta(cmd, parametros);
                        cmd.Parameters.AddWithValue("@offset", (parametros.page - 1) * parametros.pageSize);
                        cmd.Parameters.AddWithValue("@limit", parametros.pageSize);

                        using (var reader = cmd.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                documentos.Add(new
                                {
                                    id = reader["id"],
                                    titulo = reader["titulo_descriptivo"] ?? reader["nombre_archivo"],
                                    nombre_archivo = reader["nombre_archivo"],
                                    descripcion = reader["descripcion"],
                                    categoria = reader["categoria_id"],
                                    categoria_nombre = reader["categoria_nombre"],
                                    estado = reader["estado"],
                                    tamano_archivo = reader["tamano_archivo"],
                                    fecha_creacion = reader["fecha_creacion"],
                                    favorito = Convert.ToBoolean(reader["favorito"])
                                });
                            }
                        }
                    }
                }

                // Registrar actividad de auditoría
                var (ip, ua) = AuditLogger.Client(context.Request);
                _ = Task.Run(() => AuditLogger.LogAsync(usuario.Id, "GET", "/documentos", 
                    "documentos", "SELECT", $"Filtros:{parametros.busqueda}", 
                    "SUCCESS", $"Listado de {documentos.Count} documentos", ip, ua));

                // Enviar respuesta exitosa
                HttpResponseHelper.SendSuccessResponse(context, new
                {
                    items = documentos,
                    total = totalDocumentos,
                    page = parametros.page,
                    pageSize = parametros.pageSize,
                    meta = new
                    {
                        total = totalDocumentos,
                        vigentes = documentos.Count, // Se puede calcular con más precisión
                        favoritos = documentos.Count(d => (bool)((dynamic)d).favorito)
                    }
                });
            }
            catch (Exception ex)
            {
                Logger.LogError($"Error en ListarDocumentos: {ex.Message}");
                HttpResponseHelper.SendErrorResponse(context, "Error interno del servidor", 500);
            }
        }

        /// <summary>
        /// Sube un nuevo documento al sistema
        /// </summary>
        /// <param name="context">Contexto HTTP</param>
        public static void SubirDocumento(HttpListenerContext context)
        {
            try
            {
                // Validar sesión activa
                if (!SessionManager.EsSesionValida(context.Request))
                {
                    HttpResponseHelper.SendErrorResponse(context, "Sesión no válida", 401);
                    return;
                }

                var usuario = SessionManager.ObtenerUsuario(context.Request);
                if (usuario == null)
                {
                    HttpResponseHelper.SendErrorResponse(context, "Usuario no autenticado", 401);
                    return;
                }

                // Extraer datos del formulario multipart
                var datosFormulario = ExtraerDatosSubida(context.Request);
                
                // Validaciones de negocio
                var validacionResult = ValidarDatosSubida(datosFormulario);
                if (!validacionResult.esValido)
                {
                    HttpResponseHelper.SendErrorResponse(context, validacionResult.mensaje, 400);
                    return;
                }

                // Procesar subida del archivo
                var archivoInfo = ProcesarArchivoSubida(datosFormulario.archivo, usuario.Id);
                if (archivoInfo == null)
                {
                    HttpResponseHelper.SendErrorResponse(context, "Error al procesar el archivo", 500);
                    return;
                }

                // Guardar en base de datos
                var documentoId = GuardarDocumentoEnBD(datosFormulario, archivoInfo, usuario.Id);
                
                if (documentoId > 0)
                {
                    // Registrar actividad de auditoría
                    var (ip, ua) = AuditLogger.Client(context.Request);
                    _ = Task.Run(() => AuditLogger.LogAsync(usuario.Id, "POST", "/documentos", 
                        "documentos", "INSERT", $"DocumentoID:{documentoId}", 
                        "SUCCESS", $"Documento subido: {datosFormulario.nombreDocumento}", ip, ua));

                    HttpResponseHelper.SendSuccessResponse(context, new
                    {
                        mensaje = "Documento subido exitosamente",
                        documentoId = documentoId,
                        nombre = datosFormulario.nombreDocumento,
                        tamano = archivoInfo.tamano
                    }, 201);
                }
                else
                {
                    HttpResponseHelper.SendErrorResponse(context, "Error al guardar el documento", 500);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"Error en SubirDocumento: {ex.Message}");
                HttpResponseHelper.SendErrorResponse(context, "Error interno del servidor", 500);
            }
        }

        /// <summary>
        /// Elimina un documento del sistema
        /// </summary>
        /// <param name="context">Contexto HTTP</param>
        /// <param name="documentoId">ID del documento a eliminar</param>
        public static void EliminarDocumento(HttpListenerContext context, int documentoId)
        {
            try
            {
                // Validar sesión activa
                if (!SessionManager.EsSesionValida(context.Request))
                {
                    HttpResponseHelper.SendErrorResponse(context, "Sesión no válida", 401);
                    return;
                }

                var usuario = SessionManager.ObtenerUsuario(context.Request);
                if (usuario == null)
                {
                    HttpResponseHelper.SendErrorResponse(context, "Usuario no autenticado", 401);
                    return;
                }

                // Validar ID del documento
                if (documentoId <= 0)
                {
                    HttpResponseHelper.SendErrorResponse(context, "ID de documento inválido", 400);
                    return;
                }

                // Verificar existencia y permisos
                var documento = ObtenerDocumentoPorId(documentoId);
                if (documento == null)
                {
                    HttpResponseHelper.SendErrorResponse(context, "Documento no encontrado", 404);
                    return;
                }

                // Verificar permisos de eliminación
                if (!TienePermisosEliminacion(usuario, documento))
                {
                    HttpResponseHelper.SendErrorResponse(context, "No tiene permisos para eliminar este documento", 403);
                    return;
                }

                // Eliminar archivo físico
                var archivoEliminado = EliminarArchivoFisico(documento.rutaArchivo);
                
                // Eliminar registro de base de datos
                var registroEliminado = EliminarDocumentoDeBD(documentoId);

                if (registroEliminado)
                {
                    // Registrar actividad de auditoría
                    var (ip, ua) = AuditLogger.Client(context.Request);
                    _ = Task.Run(() => AuditLogger.LogAsync(usuario.Id, "DELETE", "/documentos", 
                        "documentos", "DELETE", $"DocumentoID:{documentoId}", 
                        "SUCCESS", $"Documento eliminado: {documento.nombre}", ip, ua));

                    HttpResponseHelper.SendSuccessResponse(context, new
                    {
                        mensaje = $"Documento '{documento.nombre}' eliminado exitosamente",
                        documentoId = documentoId,
                        archivoEliminado = archivoEliminado
                    });
                }
                else
                {
                    HttpResponseHelper.SendErrorResponse(context, "Error al eliminar el documento", 500);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"Error en EliminarDocumento: {ex.Message}");
                HttpResponseHelper.SendErrorResponse(context, "Error interno del servidor", 500);
            }
        }

        /// <summary>
        /// Descarga un documento del sistema
        /// </summary>
        /// <param name="context">Contexto HTTP</param>
        /// <param name="documentoId">ID del documento a descargar</param>
        public static void DescargarDocumento(HttpListenerContext context, int documentoId)
        {
            try
            {
                // Validar sesión activa
                if (!SessionManager.EsSesionValida(context.Request))
                {
                    HttpResponseHelper.SendErrorResponse(context, "Sesión no válida", 401);
                    return;
                }

                var usuario = SessionManager.ObtenerUsuario(context.Request);
                if (usuario == null)
                {
                    HttpResponseHelper.SendErrorResponse(context, "Usuario no autenticado", 401);
                    return;
                }

                // Validar ID del documento
                if (documentoId <= 0)
                {
                    HttpResponseHelper.SendErrorResponse(context, "ID de documento inválido", 400);
                    return;
                }

                // Obtener información del documento
                var documento = ObtenerDocumentoPorId(documentoId);
                if (documento == null)
                {
                    HttpResponseHelper.SendErrorResponse(context, "Documento no encontrado", 404);
                    return;
                }

                // Verificar permisos de descarga
                if (!TienePermisosDescarga(usuario, documento))
                {
                    HttpResponseHelper.SendErrorResponse(context, "No tiene permisos para descargar este documento", 403);
                    return;
                }

                // Enviar archivo
                var archivoEnviado = EnviarArchivo(context, documento);
                
                if (archivoEnviado)
                {
                    // Registrar actividad de auditoría
                    var (ip, ua) = AuditLogger.Client(context.Request);
                    _ = Task.Run(() => AuditLogger.LogAsync(usuario.Id, "GET", "/documentos/descargar", 
                        "documentos", "SELECT", $"DocumentoID:{documentoId}", 
                        "SUCCESS", $"Documento descargado: {documento.nombre}", ip, ua));
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"Error en DescargarDocumento: {ex.Message}");
                HttpResponseHelper.SendErrorResponse(context, "Error interno del servidor", 500);
            }
        }

        /// <summary>
        /// Obtiene las categorías disponibles para documentos
        /// </summary>
        /// <param name="context">Contexto HTTP</param>
        public static void ObtenerCategorias(HttpListenerContext context)
        {
            try
            {
                // Validar sesión activa
                if (!SessionManager.EsSesionValida(context.Request))
                {
                    HttpResponseHelper.SendErrorResponse(context, "Sesión no válida", 401);
                    return;
                }

                var categorias = new List<object>();

                using (var conexion = ConexionBD.ObtenerConexion())
                {
                    conexion.Open();
                    
                    var sql = @"
                        SELECT id, nombre, descripcion, activo 
                        FROM categorias_documentos 
                        WHERE activo = 1 
                        ORDER BY nombre";

                    using (var cmd = new MySqlCommand(sql, conexion))
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            categorias.Add(new
                            {
                                id = reader["id"],
                                nombre = reader["nombre"],
                                descripcion = reader["descripcion"]
                            });
                        }
                    }
                }

                HttpResponseHelper.SendSuccessResponse(context, categorias);
            }
            catch (Exception ex)
            {
                Logger.LogError($"Error en ObtenerCategorias: {ex.Message}");
                HttpResponseHelper.SendErrorResponse(context, "Error interno del servidor", 500);
            }
        }

        /// <summary>
        /// Marca/desmarca un documento como favorito
        /// </summary>
        /// <param name="context">Contexto HTTP</param>
        /// <param name="documentoId">ID del documento</param>
        public static void ToggleFavorito(HttpListenerContext context, int documentoId)
        {
            try
            {
                // Validar sesión activa
                if (!SessionManager.EsSesionValida(context.Request))
                {
                    HttpResponseHelper.SendErrorResponse(context, "Sesión no válida", 401);
                    return;
                }

                var usuario = SessionManager.ObtenerUsuario(context.Request);
                if (usuario == null)
                {
                    HttpResponseHelper.SendErrorResponse(context, "Usuario no autenticado", 401);
                    return;
                }

                // Validar ID del documento
                if (documentoId <= 0)
                {
                    HttpResponseHelper.SendErrorResponse(context, "ID de documento inválido", 400);
                    return;
                }

                bool nuevoEstadoFavorito;

                using (var conexion = ConexionBD.ObtenerConexion())
                {
                    conexion.Open();

                    // Verificar estado actual
                    var sqlVerificar = @"
                        SELECT COUNT(*) FROM favoritos_documentos 
                        WHERE documento_id = @documentoId AND usuario_id = @usuarioId";

                    bool esFavoritoActual;
                    using (var cmdVerificar = new MySqlCommand(sqlVerificar, conexion))
                    {
                        cmdVerificar.Parameters.AddWithValue("@documentoId", documentoId);
                        cmdVerificar.Parameters.AddWithValue("@usuarioId", usuario.Id);
                        esFavoritoActual = Convert.ToInt32(cmdVerificar.ExecuteScalar()) > 0;
                    }

                    // Toggle favorito
                    if (esFavoritoActual)
                    {
                        // Eliminar de favoritos
                        var sqlEliminar = @"
                            DELETE FROM favoritos_documentos 
                            WHERE documento_id = @documentoId AND usuario_id = @usuarioId";

                        using (var cmdEliminar = new MySqlCommand(sqlEliminar, conexion))
                        {
                            cmdEliminar.Parameters.AddWithValue("@documentoId", documentoId);
                            cmdEliminar.Parameters.AddWithValue("@usuarioId", usuario.Id);
                            cmdEliminar.ExecuteNonQuery();
                        }
                        nuevoEstadoFavorito = false;
                    }
                    else
                    {
                        // Agregar a favoritos
                        var sqlAgregar = @"
                            INSERT INTO favoritos_documentos (documento_id, usuario_id, fecha_creacion)
                            VALUES (@documentoId, @usuarioId, NOW())";

                        using (var cmdAgregar = new MySqlCommand(sqlAgregar, conexion))
                        {
                            cmdAgregar.Parameters.AddWithValue("@documentoId", documentoId);
                            cmdAgregar.Parameters.AddWithValue("@usuarioId", usuario.Id);
                            cmdAgregar.ExecuteNonQuery();
                        }
                        nuevoEstadoFavorito = true;
                    }
                }

                // Registrar actividad de auditoría
                var (ip, ua) = AuditLogger.Client(context.Request);
                var accion = nuevoEstadoFavorito ? "agregado a" : "eliminado de";
                _ = Task.Run(() => AuditLogger.LogAsync(usuario.Id, "POST", "/documentos/favorito", 
                    "favoritos_documentos", nuevoEstadoFavorito ? "INSERT" : "DELETE", 
                    $"DocumentoID:{documentoId}", "SUCCESS", 
                    $"Documento {accion} favoritos", ip, ua));

                HttpResponseHelper.SendSuccessResponse(context, new
                {
                    mensaje = $"Documento {accion} favoritos exitosamente",
                    documentoId = documentoId,
                    favorito = nuevoEstadoFavorito
                });
            }
            catch (Exception ex)
            {
                Logger.LogError($"Error en ToggleFavorito: {ex.Message}");
                HttpResponseHelper.SendErrorResponse(context, "Error interno del servidor", 500);
            }
        }

        #region Métodos Privados de Apoyo

        private static dynamic ExtraerParametrosListado(HttpListenerRequest request)
        {
            var query = request.Url.Query;
            var parametros = System.Web.HttpUtility.ParseQueryString(query);
            
            return new
            {
                page = int.TryParse(parametros["page"], out int p) ? p : 1,
                pageSize = int.TryParse(parametros["pageSize"], out int ps) ? ps : 10,
                busqueda = parametros["q"] ?? parametros["tipo"] ?? "",
                categoria = parametros["categoria"] ?? "",
                estado = parametros["estado"] ?? "",
                favoritos = parametros["favoritos"] == "1"
            };
        }

        private static string ConstruirConsultaListado(dynamic parametros)
        {
            var sql = @"
                SELECT d.id, d.titulo_descriptivo, d.nombre_archivo, d.descripcion,
                       d.categoria_id, c.nombre as categoria_nombre, d.estado,
                       d.tamano_archivo, d.fecha_creacion,
                       (SELECT COUNT(*) FROM favoritos_documentos f 
                        WHERE f.documento_id = d.id AND f.usuario_id = @usuarioId) as favorito
                FROM documentos d
                LEFT JOIN categorias_documentos c ON d.categoria_id = c.id
                WHERE 1=1";

            if (!string.IsNullOrEmpty(parametros.busqueda))
            {
                sql += " AND (d.titulo_descriptivo LIKE @busqueda OR d.nombre_archivo LIKE @busqueda OR d.descripcion LIKE @busqueda)";
            }

            if (!string.IsNullOrEmpty(parametros.categoria))
            {
                sql += " AND d.categoria_id = @categoria";
            }

            if (!string.IsNullOrEmpty(parametros.estado))
            {
                sql += " AND d.estado = @estado";
            }

            if (parametros.favoritos)
            {
                sql += " AND EXISTS (SELECT 1 FROM favoritos_documentos f WHERE f.documento_id = d.id AND f.usuario_id = @usuarioId)";
            }

            sql += " ORDER BY d.fecha_creacion DESC LIMIT @offset, @limit";

            return sql;
        }

        private static string ConstruirConsultaConteo(dynamic parametros)
        {
            var sql = @"
                SELECT COUNT(*)
                FROM documentos d
                LEFT JOIN categorias_documentos c ON d.categoria_id = c.id
                WHERE 1=1";

            if (!string.IsNullOrEmpty(parametros.busqueda))
            {
                sql += " AND (d.titulo_descriptivo LIKE @busqueda OR d.nombre_archivo LIKE @busqueda OR d.descripcion LIKE @busqueda)";
            }

            if (!string.IsNullOrEmpty(parametros.categoria))
            {
                sql += " AND d.categoria_id = @categoria";
            }

            if (!string.IsNullOrEmpty(parametros.estado))
            {
                sql += " AND d.estado = @estado";
            }

            if (parametros.favoritos)
            {
                sql += " AND EXISTS (SELECT 1 FROM favoritos_documentos f WHERE f.documento_id = d.id AND f.usuario_id = @usuarioId)";
            }

            return sql;
        }

        private static void AgregarParametrosConsulta(MySqlCommand cmd, dynamic parametros)
        {
            if (!string.IsNullOrEmpty(parametros.busqueda))
            {
                cmd.Parameters.AddWithValue("@busqueda", $"%{parametros.busqueda}%");
            }

            if (!string.IsNullOrEmpty(parametros.categoria))
            {
                cmd.Parameters.AddWithValue("@categoria", parametros.categoria);
            }

            if (!string.IsNullOrEmpty(parametros.estado))
            {
                cmd.Parameters.AddWithValue("@estado", parametros.estado);
            }

            // Este parámetro siempre debe agregarse para la consulta de favoritos
            cmd.Parameters.AddWithValue("@usuarioId", SessionManager.ObtenerUsuario(HttpContext.Current?.Request)?.Id ?? 0);
        }

        private static dynamic ExtraerDatosSubida(HttpListenerRequest request)
        {
            // Implementar extracción de datos multipart/form-data
            // Esta es una implementación simplificada
            return new
            {
                nombreDocumento = "Documento de prueba",
                descripcion = "Descripción del documento",
                categoria = 1,
                archivo = new { nombre = "test.pdf", contenido = new byte[0], tamano = 0 }
            };
        }

        private static (bool esValido, string mensaje) ValidarDatosSubida(dynamic datos)
        {
            if (string.IsNullOrWhiteSpace(datos.nombreDocumento))
                return (false, "El nombre del documento es obligatorio");

            if (datos.archivo == null || datos.archivo.tamano == 0)
                return (false, "Debe seleccionar un archivo válido");

            if (datos.archivo.tamano > 10 * 1024 * 1024) // 10MB
                return (false, "El archivo es demasiado grande (máximo 10MB)");

            return (true, "");
        }

        private static dynamic ProcesarArchivoSubida(dynamic archivo, int usuarioId)
        {
            // Implementar lógica de guardado de archivo
            return new
            {
                rutaCompleta = "/uploads/documentos/archivo.pdf",
                nombre = archivo.nombre,
                tamano = archivo.tamano,
                hash = "abc123"
            };
        }

        private static int GuardarDocumentoEnBD(dynamic datos, dynamic archivoInfo, int usuarioId)
        {
            // Implementar guardado en base de datos
            return 1; // Simular ID generado
        }

        private static dynamic ObtenerDocumentoPorId(int documentoId)
        {
            // Implementar consulta de documento por ID
            return new
            {
                id = documentoId,
                nombre = "Documento ejemplo",
                rutaArchivo = "/uploads/documentos/archivo.pdf",
                usuarioId = 1
            };
        }

        private static bool TienePermisosEliminacion(dynamic usuario, dynamic documento)
        {
            // Implementar lógica de permisos
            return usuario.Id == documento.usuarioId || usuario.EsAdmin;
        }

        private static bool TienePermisosDescarga(dynamic usuario, dynamic documento)
        {
            // Implementar lógica de permisos de descarga
            return true; // Por ahora permitir a todos
        }

        private static bool EliminarArchivoFisico(string rutaArchivo)
        {
            try
            {
                if (System.IO.File.Exists(rutaArchivo))
                {
                    System.IO.File.Delete(rutaArchivo);
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }

        private static bool EliminarDocumentoDeBD(int documentoId)
        {
            // Implementar eliminación de base de datos
            return true; // Simular éxito
        }

        private static bool EnviarArchivo(HttpListenerContext context, dynamic documento)
        {
            // Implementar envío de archivo como respuesta HTTP
            return true; // Simular éxito
        }

        #endregion
    }
}